ASM Program: [Function main stackOffset: -24 global: True instructions:[AssType: AssemblyType.LONGWORD Mov(Imm(2), Reg(R10d)), MovSX(Reg(R10d), Reg(R11d)), AssType: AssemblyType.QUADWORD Mov(Reg(R11d), Stack(-8)), AssType: AssemblyType.QUADWORD Mov(Stack(-8), Reg(R10d)), AssType: AssemblyType.QUADWORD Mov(Reg(R10d), Stack(-16)), AssType: AssemblyType.QUADWORD Mov(Stack(-16), Reg(R11d)), AssType: AssemblyType.QUADWORD Mov(Imm(4294967295), Reg(R10d)), AssType: AssemblyType.QUADWORD Binary(Mult, Reg(R10d), Reg(R11d)), AssType: AssemblyType.QUADWORD Mov(Reg(R11d), Stack(-16)), AssType: AssemblyType.LONGWORD Mov(Stack(-16), Reg(R10d)), AssType: AssemblyType.LONGWORD Mov(Reg(R10d), Stack(-20)), AssType: AssemblyType.LONGWORD Mov(Stack(-20), Reg(R10d)), AssType: AssemblyType.LONGWORD Mov(Reg(R10d), Stack(-24)), AssType: AssemblyType.LONGWORD Mov(Imm(0), Reg(AX)), ret, AssType: AssemblyType.LONGWORD Mov(Imm(0), Reg(AX)), ret]]

AST Program:
        VarDecl: NULL int a
        VarDecl: NULL int a
        FunDecl: STATIC sign_extend (i.0, expected.1, ) ParamTypes: (int, long, ) ReturnType: long
                Declaration:
                VarDecl: NULL long extended.2 = (long) i.0, int, long
                Statement: Expression: extended.2, long = (long) (i.0, int GREATERTHAN 4, int, int) ? 3, int : 2, int, int, long, long
                Statement: return (long) extended.2, long AND expected.1, long, int, long
        VarDecl: EXTERN long r
        VarDecl: EXTERN int q
        VarDecl: EXTERN int i = (int) 2147483648, long, int
        VarDecl: EXTERN long j = 2147483648, long
        VarDecl: EXTERN int k = 2147483647, int
        VarDecl: EXTERN long p = (long) 2147483647, int, long
        FunDecl: NULL main () ParamTypes: () ReturnType: int
                Declaration:
                VarDecl: STATIC long r.3
                Declaration:
                VarDecl: STATIC int q.4
                Declaration:
                VarDecl: STATIC int i.5 = (int) 2147483648, long, int
                Declaration:
                VarDecl: STATIC long j.6 = 2147483648, long
                Declaration:
                VarDecl: STATIC int k.7 = 2147483647, int
                Declaration:
                VarDecl: STATIC long p.8 = (long) 2147483647, int, long
                Statement: while (1, int)
                        Statement: break
                Statement: do while (1, int)
                        Statement: continue
                Statement: for (, , )
                        Statement: if (NOT sign_extend(10, int, 10, long, ), long, int)
                                Statement: return 1, int
                        Statement: if (NOT sign_extend(NEGATE 10, int, int, (long) (a, int GREATERTHAN 4, int, int) ? 3, int : 2, int, int, long, ), long, int)
                                Statement: return 2, int
                        Declaration:
                        VarDecl: NULL long l.9 = (long) 100, int, long
                        Statement: if (l.9, long NOTEQUAL 100, long, int)
                                Statement: return 3, int
                Statement: return 0, int











AST Program: [StorageType.NULL int a = None, StorageType.NULL int a = None, Function: StorageType.STATIC FunType: ParamTypes: [int, long] Return Type: long sign_extend (['i.0', 'expected.1']) Block: [Declaration: StorageType.NULL long extended.2 = ((long) (i.0 RetType: int) RetType: long), Statement: ((extended.2 RetType: long) = ((long) ((Binary Expression: Operator: BinopType.GREATERTHAN Left: (i.0 RetType: int) Right: (4 RetType: int) RetType: int) ? (3 RetType: int) : (2 RetType: int) RetType: int) RetType: long) RetType: long), Statement: return ((long) (Binary Expression: Operator: BinopType.AND Left: (extended.2 RetType: long) Right: (expected.1 RetType: long) RetType: int) RetType: long)], StorageType.EXTERN long r = None, StorageType.EXTERN int q = None, StorageType.EXTERN int i = ((int) (2147483648L RetType: long) RetType: int), StorageType.EXTERN long j = (2147483648L RetType: long), StorageType.EXTERN int k = (2147483647 RetType: int), StorageType.EXTERN long p = ((long) (2147483647 RetType: int) RetType: long), Function: StorageType.NULL FunType: ParamTypes: [] Return Type: int main ([]) Block: [Declaration: StorageType.STATIC long r.3 = None, Declaration: StorageType.STATIC int q.4 = None, Declaration: StorageType.STATIC int i.5 = ((int) (2147483648L RetType: long) RetType: int), Declaration: StorageType.STATIC long j.6 = (2147483648L RetType: long), Declaration: StorageType.STATIC int k.7 = (2147483647 RetType: int), Declaration: StorageType.STATIC long p.8 = ((long) (2147483647 RetType: int) RetType: long), Statement: for None (Declaration: StorageType.NULL int m.9 = (0 RetType: int) ; (Binary Expression: Operator: BinopType.LESSTHAN Left: (m.9 RetType: int) Right: (4 RetType: int) RetType: int) ; ((m.9 RetType: int) = (Binary Expression: Operator: BinopType.ADD Left: (m.9 RetType: int) Right: (1 RetType: int) RetType: int) RetType: int)) thenS: Block: None, Statement: if ((Unary Expression: Operator: UnopType.NOTExpression: (sign_extend([(10 RetType: int), (10L RetType: long)]) RetType: long) RetType: int)) thenS: Block: [Statement: return (1 RetType: int)] elseS: None, Statement: if ((Unary Expression: Operator: UnopType.NOTExpression: (sign_extend([(Unary Expression: Operator: UnopType.NEGATEExpression: (10 RetType: int) RetType: int), ((long) ((Binary Expression: Operator: BinopType.GREATERTHAN Left: (a RetType: int) Right: (4 RetType: int) RetType: int) ? (3 RetType: int) : (2 RetType: int) RetType: int) RetType: long)]) RetType: long) RetType: int)) thenS: Block: [Statement: return (2 RetType: int)] elseS: None, Declaration: StorageType.NULL long l.10 = ((long) (100 RetType: int) RetType: long), Statement: if ((Binary Expression: Operator: BinopType.NOTEQUAL Left: (l.10 RetType: long) Right: (100L RetType: long) RetType: int)) thenS: Block: [Statement: return (3 RetType: int)] elseS: None, Statement: return (0 RetType: int)]]




{'a': a int InitialVal: <typeChecker.Tentative object at 0x7f9c3bf31820> Global: True, 'sign_extend': sign_extend FunType: ParamTypes: [int, long] Return Type: long Defined: True Global: False, 'i.0': i.0 int <typeChecker.LocalAttributes object at 0x7f9c3bf31940>, 'expected.1': expected.1 long <typeChecker.LocalAttributes object at 0x7f9c3bf319a0>, 'extended.2': extended.2 long <typeChecker.LocalAttributes object at 0x7f9c3bf31910>, 'r': r long InitialVal: <typeChecker.NoInitializer object at 0x7f9c3bf31f70> Global: True, 'q': q int InitialVal: <typeChecker.NoInitializer object at 0x7f9c3bf32090> Global: True, 'i': i int InitialVal: -2147483648 Global: True, 'j': j long InitialVal: 2147483648 Global: True, 'k': k int InitialVal: 2147483647 Global: True, 'p': p long InitialVal: 2147483647 Global: True, 'main': main FunType: ParamTypes: [] Return Type: int Defined: True Global: True, 'r.3': r.3 long InitialVal: 0 Global: False, 'q.4': q.4 int InitialVal: 0 Global: False, 'i.5': i.5 int InitialVal: -2147483648 Global: False, 'j.6': j.6 long InitialVal: 2147483648 Global: False, 'k.7': k.7 int InitialVal: 2147483647 Global: False, 'p.8': p.8 long InitialVal: 2147483647 Global: False, 'm.9': m.9 int <typeChecker.LocalAttributes object at 0x7f9c3bf0db80>, 'l.10': l.10 long <typeChecker.LocalAttributes object at 0x7f9c3bf38320>}



Statement: 
(
    #left
    (extended.2 RetType: long) = 
    #right
    (
        (long) (    
                    #cond Exp
                    (
                        Binary Expression: Operator: BinopType.GREATERTHAN 
                            Left: (i.0 
                            RetType: int) 
                            Right: (4 
                            RetType: int) 

                    RetType: int) 

                    ? 
                    #then Exp
                    (3 RetType: int) 
                    :
                    #else Exp 
                    (2 RetType: int) 
                
                #Conditional Expression int
                RetType: int) 
        RetType: long) 
    
RetType: long)


 = 2^31

sign extend

Truncate

movl ecx, eax


18 + 5 + 6

29


entry
    name
    attrs
    type

    StaticAttributes 
        Init 
            Tentative
            Initial


Si la viejita es global 



prev not tiene linkage or nueva no es extern:
    
not (prev_entry.has_linkage and decl.storage_class == Extern)


Has linkage or not


AST Program: [Function: foo ([]) Block: None, Function: main ([]) Block: [
    
    Declaration: Function: a ([]) Block: None
    
    , Statement: for None (Declaration: a = None ; None ; None) thenS: Block: None, Statement: return foo], foo = None, foo = 4]

{}

AST Program: [Function: foo ([]) Block: None, Function: main ([]) Block: [
    
    Declaration: Function: a ([]) Block: None

    , Statement: for None (Declaration: a = None ; None ; None) thenS: Block: None, Statement: return foo], foo = None, foo = 4]

;


All external variables are static

external subset of static




Necesitas si 

caller -> callee
        el callee

24
8
8
16
8


8
8
8
8

a + g


8 bytes puntero a el return instruction address


32
//7
add 32 rbp, eax



Osea si se puede ghosting, no 

So field type is identifier and the name main

identifier -> main
statement -> body

    .globl main
main:
 pushq %rbp
 movq %rsp, %rbp
 subq $8, %rsp
 1 movl $2, 2 -4(%rbp)
 3 negl -4(%rbp)
 4 movl -4(%rbp), %r10d
 5 movl %r10d, -8(%rbp)
 6 notl -8(%rbp)
 7 movl -8(%rbp), %eax
 movq %rbp, %rsp
 popq %rbp
 ret

 0xffffda60
 

 0x7fffffffd508

previous stackframe
 rbp - address

 rsp - last_val

 //stack frame
 rbp - address ->rbp
       val0
 rsp - val1

inner most expression and working our way out!
tmp.0 = -8
tmp.1 = ~tmp.0 
tmp.2 = -tmp.1
return tmp.2

insert (actual, offset)
buscas 
usas

insertas
usas

parent->next = newStackOperand
newStackOperand->next  = actual->next


(actual, offset - 0)
actual2, offset - 4
actual3, offset - 8

actual, reg

reg    , other


+ - * % /
left associative

precedence
* / %
+ - 

subl a, b

b = b - a


--------------------------------------

a / b b is the divisor

    


a = RDX RAX
idivq b

a = EDX EAX
idivl b 

EDX = quotient
EAX = remainder

-------------------------------------------

Sign extension

