
prev not tiene linkage or nueva no es extern:
    
not (prev_entry.has_linkage and decl.storage_class == Extern)


Has linkage or not


AST Program: [Function: foo ([]) Block: None, Function: main ([]) Block: [
    
    Declaration: Function: a ([]) Block: None
    
    , Statement: for None (Declaration: a = None ; None ; None) thenS: Block: None, Statement: return foo], foo = None, foo = 4]

{}

AST Program: [Function: foo ([]) Block: None, Function: main ([]) Block: [
    
    Declaration: Function: a ([]) Block: None

    , Statement: for None (Declaration: a = None ; None ; None) thenS: Block: None, Statement: return foo], foo = None, foo = 4]

;


All external variables are static

external subset of static




Necesitas si 

caller -> callee
        el callee

24
8
8
16
8


8
8
8
8

a + g


8 bytes puntero a el return instruction address


32
//7
add 32 rbp, eax



Osea si se puede ghosting, no 

So field type is identifier and the name main

identifier -> main
statement -> body

    .globl main
main:
 pushq %rbp
 movq %rsp, %rbp
 subq $8, %rsp
 1 movl $2, 2 -4(%rbp)
 3 negl -4(%rbp)
 4 movl -4(%rbp), %r10d
 5 movl %r10d, -8(%rbp)
 6 notl -8(%rbp)
 7 movl -8(%rbp), %eax
 movq %rbp, %rsp
 popq %rbp
 ret

 0xffffda60
 

 0x7fffffffd508

previous stackframe
 rbp - address

 rsp - last_val

 //stack frame
 rbp - address ->rbp
       val0
 rsp - val1

inner most expression and working our way out!
tmp.0 = -8
tmp.1 = ~tmp.0 
tmp.2 = -tmp.1
return tmp.2

insert (actual, offset)
buscas 
usas

insertas
usas

parent->next = newStackOperand
newStackOperand->next  = actual->next


(actual, offset - 0)
actual2, offset - 4
actual3, offset - 8

actual, reg

reg    , other


+ - * % /
left associative

precedence
* / %
+ - 

subl a, b

b = b - a


--------------------------------------

a / b b is the divisor

    


a = RDX RAX
idivq b

a = EDX EAX
idivl b 

EDX = quotient
EAX = remainder

-------------------------------------------

Sign extension

